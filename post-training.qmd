---
title: "Post-Training for Foundation Models"
format: html
---

## Introduction: Why Post-Training Matters for Reasoning

Large language models like GPT-4 and Claude have demonstrated impressive capabilities across a wide range of tasks, including writing, summarization, problem solving, and open-ended reasoning. These are examples of **foundation models**—large, general-purpose models trained on broad data at scale, designed to serve as flexible building blocks for many downstream applications. But their raw, pre-trained form is not sufficient for safe, reliable deployment.

The core limitation lies in how LLMs are initially trained. They don’t follow strict rules or formal logic. Instead, they learn from statistical patterns in massive text corpora. This makes them flexible and creative—but also means their reasoning can be inconsistent, misleading, or untrustworthy.

These models are typically optimized to predict the next word in a sentence—not to follow instructions, act ethically, or meet human expectations. This initial phase is called **pre-training**, and it focuses on token-level quality—generating the most likely next word given the prior context. But users care more about the quality of the entire response than just the next token.

This is where **post-training** comes in. It refines the model’s behavior to be helpful, safe, and aligned with human intent. Some compare pre-training to reading a vast amount of text, and post-training to learning how to apply that knowledge in a useful, trustworthy way.

Post-training typically involves two key stages:

- **Supervised fine-tuning (SFT)**: teaching the model to follow instructions and carry out tasks
- **Preference optimization**: aligning outputs with human feedback using methods like RLHF, DPO, or RLAIF

These techniques not only improve factual accuracy and safety, but also enhance the model’s ability to reason. And surprisingly, they require relatively little compute—InstructGPT, for example, used only 2% of its total compute budget for post-training.

While supervised and preference tuning are the core of post-training, it’s also important to consider **prompting techniques**. These methods—such as **zero-shot**, **few-shot**, and **chain-of-thought** prompting—don’t change the model’s weights but can steer its behavior at inference time. Prompting often delivers strong results without additional training, making it an essential part of real-world LLM deployment.

In the sections that follow, we’ll explore both post-training techniques and prompting strategies, and how they work together to transform general-purpose LLMs into dependable, aligned assistants.

---



## Prompting

### Zero-Shot and Few-Shot In-Context Learning

**Concept**: Use prompts to guide pretrained models without any gradient updates or finetuning.

- **Zero-shot prompting**: Ask a question or issue a command without examples.  
  Example: “Translate this sentence into French.”

- **Few-shot prompting**: Provide a few (input → output) examples to demonstrate the task.  
  Example: showing multiple sentiment labels before asking for one more.

- **In-context learning**: The model uses these patterns to perform the task, thanks to its massive training data and scale.

**Key Insight**: These capabilities emerge only in large-scale models (e.g., GPT-3 with 175B parameters). Creative prompting (e.g., “TL;DR”) can yield surprisingly strong performance.

### Chain-of-Thought (CoT) Prompting

**Concept**: Improve model reasoning by encouraging step-by-step answers.

Example: “Let’s think step by step.”

- Enhances performance on arithmetic, logic puzzles, and commonsense reasoning tasks
- Works in both few-shot and zero-shot settings with the right phrasing

Why it works: CoT helps the model break complex reasoning into interpretable steps—an emergent behavior at larger model scales.

## Instruction Finetuning

**Concept:**  
Instruction finetuning is a supervised post-training technique where LLMs are trained on a curated set of (instruction, response) pairs. The goal is to help the model better understand and follow natural language instructions across a wide range of tasks — even those it hasn’t seen before. This approach builds the foundation for improved alignment, generalization, and usability in real-world applications.

**General Advantages:**
- Encourages robust task generalization in zero- and few-shot settings  
- Improves user alignment and consistency across prompt styles  
- Makes LLMs more helpful, structured, and controllable  

**General Limitations:**
- Requires significant effort to create high-quality, diverse instruction datasets  
- Open-ended instructions may lack objective evaluation criteria  
- Human-written prompts and responses may introduce bias, inconsistency, or noise  

| **Aspect**        | **Details**                                                                                   |
|-------------------|-----------------------------------------------------------------------------------------------|
| **Goal & Use Cases** | Teach the model to follow diverse instructions such as summarization, classification, QA, and creative writing. Supports zero-/few-shot generalization across task types. |
| **Models**        | FLAN-T5, InstructGPT, Alpaca                                                                  |
| **Datasets**      | Super-NaturalInstructions, Self-Instruct, FLAN Collection                                     |
| **Benchmarks**    | MMLU, BIG-Bench                                                                               |
| **Benefits**      | - Improves generalization to unseen tasks<br>- Produces more helpful and consistent responses |
| **Limitations**   | - High cost of collecting quality labeled data<br>- Open-ended instructions lack clear ground truth<br>- Human-written prompts may be noisy or inconsistent |



## Reinforcement Learning from Human Feedback (RLHF)

**Concept**: Use reinforcement learning to align model behavior with human preferences.

### RLHF Pipeline:
1. Start with an instruction-tuned model  
2. Collect human preference comparisons (A > B)  
3. Train a reward model  
4. Use RL (e.g., PPO) to maximize reward while applying KL penalty to stay close to the base model

**RLHF Objective**:

$$
\mathbb{E}_{\hat{y} \sim p_{\theta}^{\text{RL}}} \left[ R(x, \hat{y}) - \beta \log \frac{p_{\theta}^{\text{RL}}(\hat{y}|x)}{p_{\text{PT}}(\hat{y}|x)} \right]
$$

**Challenges**:
- Expensive and tricky to tune
- Can lead to overfitting the reward model (reward hacking)
- Still dependent on noisy human preferences

## Direct Preference Optimization (DPO)

**Concept**: Simplified alternative to RLHF using only likelihood ratios to encode preferences directly into the model.

### DPO Loss:

$$
J_{\text{DPO}}(\theta) = -\mathbb{E}_{(x, y_w, y_l)} \log \sigma \left( R_{\theta}(x, y_w) - R_{\theta}(x, y_l) \right)
$$

- No need for a separate reward model or PPO
- No online sampling
- Very stable and scalable

**Adoption**:
- Open-source LLMs like OpenChat and LLaMA variants now commonly use DPO

## Limitations and What’s Next

### Challenges with RLHF and DPO:
- Human feedback is noisy, inconsistent, and often biased
- Reward models are imperfect and can be overoptimized
- Risk of hallucination remains
- Human labelers may not reflect the preferences or safety standards of all users

### Emerging Techniques:
- RL from AI Feedback (RLAIF): Replace human labelers with AI critics
- Self-Taught Reasoning (STaR): Train on the model’s own reasoning traces
- Constitutional AI: Models self-critique and revise responses using ethical rules
- Personalization: Tailor outputs to user-specific preferences

## Summary Table

| Method              | Description                           | Pros                           | Cons                             |
|---------------------|----------------------------------------|---------------------------------|----------------------------------|
| Prompting           | In-context use of base LMs             | Simple, no training             | Limited context window           |
| Chain-of-Thought    | Adds step-by-step reasoning            | Improves reasoning              | Requires phrasing and scale      |
| Instruction Tuning  | Supervised finetuning on instructions  | Strong generalization           | Needs labeled data               |
| RLHF                | Optimize using human preferences       | Aligned, helpful output         | Complex, expensive               |
| DPO                 | Direct optimization via comparisons    | Simple, effective, scalable     | Still approximates human intent  |

## Final Thoughts

Post-training techniques are the critical bridge between general-purpose language models and real-world applications. Prompting and instruction tuning help guide behavior, while alignment methods like RLHF and DPO aim to make models more helpful, safe, and controllable.

The field is evolving rapidly, with new work aiming to make alignment faster, cheaper, and more robust. Stay tuned.