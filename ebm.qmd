---
title: "Energy-Based Models: A Flexible Approach to Generative Modeling"
format:
  html:
    toc: true
    code-fold: true
    smooth-scroll: true
    theme: cosmo
    math: mathjax
---

## Introduction

In the world of generative models, techniques like VAEs, GANs, and normalizing flows have each carved out their nicheâ€”but all of them come with specific constraints. **Energy-Based Models (EBMs)** offer a powerful alternative thatâ€™s **architecturally flexible**, **conceptually elegant**, and **growing in popularity** in modern deep learning research.

---

## Limitations of Mainstream Generative Models

| Model                   | Pros                                    | Cons                                                                 |
|------------------------|-----------------------------------------|----------------------------------------------------------------------|
| **VAEs**               | Probabilistic framework, tractable ELBO | Model architecture restrictions; blurry samples                     |
| **Normalizing Flows**  | Exact likelihood, invertibility          | Restricted to invertible architectures; expensive Jacobian computation |
| **Autoregressive Models** | Exact likelihood                    | Slow sampling; autoregressive dependency limits parallelism         |
| **GANs**               | High-quality samples; flexible           | No likelihood; unstable training; mode collapse                     |

These models attempt to approximate the true data distribution $P_{\text{data}}$ by selecting a model $P_\theta$ from a constrained family, often limited by the need for tractable likelihoods, invertible mappings, or adversarial training stability.

::: {.callout appearance="simple"}
To understand how Energy-Based Models overcome many of these limitations, we first need to revisit a fundamental question in generative modeling: **what makes a valid probability distribution?**

The next section walks through the mathematical foundation that underpins EBMs â€” and introduces a clever trick that allows them to sidestep many of the constraints faced by traditional generative models.
:::

---

## Math Review

### Understanding the Probability Foundation Behind EBMs

In generative modeling, a valid probability distribution $p(x)$ must satisfy:

- **Non-negativity**:  
  $$
  p(x) \geq 0
  $$

- **Normalization**:  
  $$
  \int p(x)\, dx = 1
  $$

While itâ€™s easy to define a function that satisfies $p(x) \geq 0$ (e.g., using exponentials), ensuring that it also sums to 1 â€” i.e., $\int p(x)\, dx = 1$ â€” is much more difficult, especially for flexible functions like neural networks.

---

### Why do we introduce $g(x)$?

Instead of modeling $p(x)$ directly, we define a non-negative function $g(x) \geq 0$ and turn it into a probability distribution by normalizing:

$$
p_\theta(x) = \frac{g_\theta(x)}{Z(\theta)}, \quad \text{where} \quad Z(\theta) = \int g_\theta(x)\, dx
$$

This trick simplifies the problem by separating the two requirements:

- $g_\theta(x)$ ensures non-negativity  
- $Z(\theta)$ enforces normalization

This normalization constant $Z(\theta)$ is also known as the **partition function**.

---

### Intuition

Think of $g_\theta(x)$ as a scoring function:

- Higher $g_\theta(x)$ means more likely  
- Dividing by $Z(\theta)$ rescales these scores to form a valid probability distribution

---

### From Scores to Probabilities in EBMs

Energy-Based Models follow the same idea we've established earlier: define a **scoring function** $f_\theta(x)$ that assigns high values to likely data points, and then convert these scores into probabilities using an exponential transformation and normalization.  
This allows us to build flexible probabilistic models without needing tractable likelihoods or invertible mappings.

We use an **exponential function** because:

- It guarantees non-negativity: $\exp(f_\theta(x)) \geq 0$
- It allows us to interpret $f_\theta(x)$ as an unnormalized log-probability
- It connects naturally to many well-known distributions (e.g., exponential family, Boltzmann distribution)

We define:

$$
g_\theta(x) = \exp(f_\theta(x)) \quad \Rightarrow \quad p_\theta(x) = \frac{e^{f_\theta(x)}}{Z(\theta)}
$$

To align with the physics intuition that lower energy = higher probability, we define the **energy function** as:

$$
E_\theta(x) = -f_\theta(x)
$$

This gives us the classic EBM form:

$$
p_\theta(x) = \frac{e^{-E_\theta(x)}}{Z(\theta)}
$$

This formulation gives EBMs the freedom to use any differentiable function for $f_\theta(x)$, and only requires that we can compute or approximate its gradients.

--- 

### Applications of EBMs Without Computing $Z(\theta)$

In general, evaluating the full probability $p_\theta(x)$ requires computing the partition function $Z(\theta)$:

$$
p_\theta(x) = \frac{1}{Z(\theta)} \exp(f_\theta(x))
$$

::: {.callout-tip appearance="simple"}
**Key Insight**  
In some applications, we donâ€™t need the exact probability â€” we only need to compare scores.  
This allows EBMs to be useful even when the partition function is intractable.
:::

When comparing two samples $x$ and $x'$, the ratio:

$$
\frac{p_\theta(x)}{p_\theta(x')} = \exp(f_\theta(x) - f_\theta(x'))
$$

does **not** involve $Z(\theta)$.

This means we can easily compare which input is more likely â€” a powerful property of EBMs.

**Practical Applications**:

- **Anomaly detection**: Identify inputs with unusually low likelihood.
- **Denoising**: Prefer cleaner versions of corrupted data by comparing likelihoods.

---

### Key Benefits of EBMs

**Very flexible model architectures**  
No need for invertibility, autoregressive factorization, or adversarial design.

**Stable training**  
Compared to GANs, EBMs can be more robust and easier to optimize.

**High sample quality**  
Capable of modeling complex, multi-modal data distributions.

**Flexible composition**  
Energies can be combined to support multi-task objectives or structured learning.

---

### Limitations of EBMs

Despite their strengths, EBMs come with notable challenges:

**Hard Sampling**

- No direct way to draw samples from $p_\theta(x)$  
- Requires iterative MCMC methods (e.g., Langevin dynamics, Metropolis-Hastings)  
- Sampling cost is high and scales poorly in high dimensions

**Hard Likelihood Evaluation and Learning**

- Partition function $Z(\theta)$ is intractable to compute  
- Cannot evaluate $\log p_\theta(x)$ directly  
- Learning requires **pushing down energy of incorrect samples**, not just increasing energy of training data

**No Feature Learning (by default)**

- EBMs do not learn latent representations unless explicitly modeled (e.g., using RBMs or structured latent energy functions)

---

## Learning and Inference in Energy-Based Models

We optimize the likelihood:

$$
\log p_\theta(x_{\text{train}}) = f_\theta(x_{\text{train}}) - \log Z(\theta)
$$

Gradient:

$$
\nabla_\theta f_\theta(x_{\text{train}}) - \mathbb{E}_{x \sim p_\theta}[\nabla_\theta f_\theta(x)]
$$

Since $$Z(\theta)$$ is intractable, this expectation is approximated using **sampling**.

---

## Contrastive Divergence

Contrastive Divergence approximates the gradient using:

$$
\nabla_\theta f_\theta(x_{\text{train}}) - \nabla_\theta f_\theta(x_{\text{sample}})
$$

Where $$x_{\text{sample}} \sim p_\theta$$ (via MCMC). The goal is to increase $f$ on training data and decrease it elsewhere.

---

## Sampling from Energy-Based Models

We can't sample directly from EBMs, but we can use **MCMC** methods.

### Metropolis-Hastings

1. Propose $$x' = x + \text{noise}$$  
2. Accept:
   - Always if $$f(x') \geq f(x)$$  
   - Otherwise with probability $$\exp(f(x') - f(x))$$  

Converges to $$p_\theta(x)$$ as $$T \to \infty$$, but is slow in high dimensions.

---

### Langevin Dynamics

Uses gradients:

$$
x^{t+1} = x^t + \epsilon \nabla_x f_\theta(x^t) + \sqrt{2\epsilon} z^t, \quad z^t \sim \mathcal{N}(0, I)
$$

Works well when $$\nabla_x f_\theta(x)$$ is tractable (which it is in EBMs).

---

### Challenges of MCMC Sampling

- Convergence is **slow**, especially in high dimensions
- Requires multiple steps **for every training iteration**
- Can dominate training time in contrastive divergence

> Sampling is the key bottleneck in training EBMs. Effective MCMC strategies are critical to making them practical in real-world settings.


## ðŸ“š References

[1] Atcold, Y. (2020). *NYU Deep Learning Spring 2020 â€“ Week 07: Energy-Based Models*. Retrieved from [https://atcold.github.io/NYU-DLSP20/en/week07/07-1/](https://atcold.github.io/NYU-DLSP20/en/week07/07-1/)

[2] LeCun, Y., Hinton, G., & Bengio, Y. (2021). *A Path Towards Autonomous Machine Intelligence*. arXiv. Retrieved from [https://arxiv.org/pdf/2101.03288](https://arxiv.org/pdf/2101.03288)

[3] MIT. (2022). *Energy-Based Models â€“ MIT Class Project*. Retrieved from [https://energy-based-model.github.io/Energy-based-Model-MIT/](https://energy-based-model.github.io/Energy-based-Model-MIT/)

[4] University of Amsterdam. (2021). *Deep Energy Models â€“ UvA DL Notebooks*. Retrieved from [https://uvadlc-notebooks.readthedocs.io/en/latest/tutorial_notebooks/tutorial8/Deep_Energy_Models.html](https://uvadlc-notebooks.readthedocs.io/en/latest/tutorial_notebooks/tutorial8/Deep_Energy_Models.html)

[5] MIT. (2022). *Compositional Generation and Inference with Energy-Based Models*. Retrieved from [https://energy-based-model.github.io/compositional-generation-inference/](https://energy-based-model.github.io/compositional-generation-inference/)